import Head from "next/head";
import { useState } from "react";
import styles from "../styles/Home.module.css";
import Image from "next/image";

import fetch from "isomorphic-unfetch";

export default function Home() {
  const [address, setAddress] = useState("");
  const [blockNumber, setBlockNumber] = useState(0);
  const [rpcUrl, setRpcUrl] = useState("");

  const [result, setResult] = useState<string[]>([]);
  const [error, setError] = useState("");
  const [loading, setLoading] = useState(false);

  const handleSubmit = async () => {
    setResult("");
    setError("");
    setLoading(true);
    await sendApiRequest();
  };

  async function sendApiRequest() {
    const payload = {
      rpcUrl: rpcUrl,
    };
    const response = await fetch("/api/fetchLatestBlock", {
      method: "POST",
      body: JSON.stringify(payload),
    });
    const latestBlockResponse = await response.json();
    const latestBlock = Number(latestBlockResponse.stdout)
    console.log("Printing response data, ", latestBlock)

    const startBlock = Number(latestBlockResponse.stdout) - 10000 

    // Change to dynamic value
    const payload2 = {
      blockNumber: 16145980
    }
    const response2 = await fetch("/api/fetchTransactions", {
      method: "POST",
      body: JSON.stringify(payload2)
    })
    const transactionArrayResponse = await response2.json()
    const rawTxnArray = transactionArrayResponse.txnArray
    const startIndex = rawTxnArray.indexOf("[")
    const endIndex = rawTxnArray.indexOf("]")
    const transactionArray = rawTxnArray.slice(startIndex+1, endIndex-1)
    const transactionArrayParsed = transactionArray.split("\n\t")
    // NOTE: First element is empty string
    console.log("Printing response data, ", transactionArrayParsed)

    // let receiptsArray = []
    // for (let index=1; index<transactionArrayParsed.length; index++) {
    //   const payload3 = {
    //     txHash: transactionArrayParsed[index]
    //   }
    //   const response3 = await fetch("/api/fetchTransactionReceipt", {
    //     method: "POST", 
    //     body: JSON.stringify(payload3)
    //   })
    //   const receiptArrayResponse = await response3.json()
    //   receiptsArray.push(receiptArrayResponse)
    // }
    // console.log("Printing response data, ", receiptsArray)

    setLoading(false);
    setResult(transactionArrayParsed);
    setError("");
  }

  const renderSubmittedContainer = () => {
    return (
      <div className={styles.result}>
        <h3>Function Result:</h3>
        {result.map((elem, i) => (
          <p key={i}>{elem}</p>
        ))}
      </div>
    );
  };

  const renderErrorContainer = () => {
    return (
      <div className={styles.result}>
        <h3>Error Message:</h3>
        <p>{error}</p>
      </div>
    );
  };

  // Can include validation logic for each parameter if required
  const onAddressChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const { value } = event.target;
    setAddress(value);
  };

  const onBlockNumberChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const { value } = event.target;
    setBlockNumber(Number(value));
  };

  const onRpcUrlChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const { value } = event.target;
    setRpcUrl(value);
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Foundry-Tool</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          <a href="https://book.getfoundry.sh/">Foundry</a> Dev Tool
        </h1>

          <div className={styles.infoBox}>
            <p className={styles.description}>
              For ERC20 tests the following fields are required:{" "}
            </p>
            <ol>1*. Address of the ERC20 Contract</ol>
            <ol>2*. Number of blocks to query </ol>
            <ol>3*. RPC url </ol>
          </div>

        <form
          onSubmit={(event) => {
            event.preventDefault();
            handleSubmit();
          }}
        >
      
            <div className={styles.grid}>
              <div className={styles.card}>
                <p>Address:</p>
                <input
                  className={styles.input}
                  type="text"
                  placeholder="0xsdsds.."
                  value={address}
                  onChange={onAddressChange}
                />
              </div>
            </div>

            <div className={styles.grid}>
              <div className={styles.card}>
                <p>Number of Blocks:</p>
                <input
                  className={styles.input}
                  type="number"
                  placeholder="16237586"
                  value={blockNumber}
                  onChange={onBlockNumberChange}
                />
              </div>
            </div>

            <div className={styles.grid}>
              <div className={styles.card}>
                <p>RPC url:</p>
                <input
                  className={styles.input}
                  type="text"
                  placeholder="https://goerli.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161"
                  value={rpcUrl}
                  onChange={onRpcUrlChange}
                />
              </div>
            </div>
          

          <div className={styles.buttonContainer}>
            <button type="submit" className={styles.button}>
              Submit
            </button>
          </div>
        </form>
        {loading ? (
          <div>
            <p>Loading</p>{" "}
            <Image src="/loading.gif" alt="" width={50} height={50} />
          </div>
        ) : (
          ""
        )}
        {result != "" ? renderSubmittedContainer() : ""}
        {error != "" ? renderErrorContainer() : ""}
      </main>
    </div>
  );
}
